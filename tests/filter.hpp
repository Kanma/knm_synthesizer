/*
 * SPDX-FileCopyrightText: 2025 Philip Abbet <philip.abbet@gmail.com>
 *
 * SPDX-FileContributor: Philip Abbet <philip.abbet@gmail.com>
 *
 * SPDX-License-Identifier: MIT
*/

TEST_CASE("Filter")
{
    float buffer[101];
    
    for (int i = 0; i < 101; ++i)
        buffer[i] = -1.0f + 0.02f * i;


    SECTION("Fc = 100Hz, res = 0dB, 22050Hz")
    {
        float ref[] = {
            -0.0002f, -0.0010f, -0.0025f, -0.0047f, -0.0076f, -0.0111f, -0.0152f, -0.0198f, -0.0249f,
            -0.0304f, -0.0364f, -0.0427f, -0.0493f, -0.0563f, -0.0635f, -0.0710f, -0.0787f, -0.0865f,
            -0.0945f, -0.1026f, -0.1108f, -0.1191f, -0.1274f, -0.1357f, -0.1440f, -0.1523f, -0.1605f,
            -0.1687f, -0.1768f, -0.1847f, -0.1926f, -0.2003f, -0.2078f, -0.2152f, -0.2223f, -0.2293f,
            -0.2360f, -0.2425f, -0.2488f, -0.2548f, -0.2606f, -0.2660f, -0.2712f, -0.2761f, -0.2807f,
            -0.2850f, -0.2890f, -0.2926f, -0.2959f, -0.2989f, -0.3015f, -0.3038f, -0.3058f, -0.3074f,
            -0.3086f, -0.3095f, -0.3100f, -0.3102f, -0.3100f, -0.3094f, -0.3085f, -0.3071f, -0.3055f,
            -0.3034f, -0.3010f, -0.2982f, -0.2951f, -0.2916f, -0.2877f, -0.2835f, -0.2789f, -0.2739f,
            -0.2686f, -0.2630f, -0.2569f, -0.2506f, -0.2439f, -0.2368f, -0.2294f, -0.2217f, -0.2136f,
            -0.2052f, -0.1965f, -0.1875f, -0.1781f, -0.1684f, -0.1585f, -0.1482f, -0.1376f, -0.1267f,
            -0.1155f, -0.1041f, -0.0923f, -0.0803f, -0.0680f, -0.0554f, -0.0426f, -0.0295f, -0.0162f,
            -0.0026f, 0.0112f,
        };

        SynthesizerSettings setting(22050);
        BiQuadFilter filter(setting);

        filter.clearBuffer();
        filter.setLowPassFilter(100.0f, decibels_to_linear(0.0f));

        filter.process(buffer, 101);

        for (int i = 0; i < 101; ++i)
            REQUIRE(buffer[i] == Approx(ref[i]).margin(0.0001f));
    }

    SECTION("Fc = 100Hz, res = 20dB, 22050Hz")
    {
        float ref[] = {
            -0.000203f, -0.001009f, -0.002606f, -0.004975f, -0.008096f, -0.011946f, -0.016506f,
            -0.021753f, -0.027665f, -0.034219f, -0.041391f, -0.049157f, -0.057494f, -0.066377f,
            -0.075781f, -0.085680f, -0.096049f, -0.106862f, -0.118093f, -0.129715f, -0.141701f,
            -0.154025f, -0.166659f, -0.179576f, -0.192748f, -0.206149f, -0.219749f, -0.233522f,
            -0.247439f, -0.261472f, -0.275595f, -0.289777f, -0.303993f, -0.318214f, -0.332411f,
            -0.346559f, -0.360628f, -0.374592f, -0.388423f, -0.402094f, -0.415579f, -0.428851f,
            -0.441883f, -0.454650f, -0.467125f, -0.479283f, -0.491099f, -0.502548f, -0.513606f,
            -0.524248f, -0.534451f, -0.544192f, -0.553448f, -0.562196f, -0.570415f, -0.578083f,
            -0.585179f, -0.591684f, -0.597576f, -0.602838f, -0.607450f, -0.611395f, -0.614654f,
            -0.617211f, -0.619049f, -0.620153f, -0.620508f, -0.620100f, -0.618914f, -0.616938f,
            -0.614159f, -0.610566f, -0.606148f, -0.600894f, -0.594795f, -0.587841f, -0.580026f,
            -0.571341f, -0.561780f, -0.551336f, -0.540005f, -0.527782f, -0.514663f, -0.500645f,
            -0.485726f, -0.469905f, -0.453180f, -0.435551f, -0.417020f, -0.397587f, -0.377255f,
            -0.356026f, -0.333904f, -0.310893f, -0.286998f, -0.262225f, -0.236581f, -0.210071f,
            -0.182705f, -0.154490f, -0.125436f,
        };

        SynthesizerSettings setting(22050);
        BiQuadFilter filter(setting);

        filter.clearBuffer();
        filter.setLowPassFilter(100.0f, decibels_to_linear(20.0f));

        filter.process(buffer, 101);

        for (int i = 0; i < 101; ++i)
            REQUIRE(buffer[i] == Approx(ref[i]).margin(0.0001f));
    }

    SECTION("Fc = 1000Hz, res = 50dB, 44100Hz")
    {
        float ref[] = {
            -0.005065f, -0.025119f, -0.064511f, -0.122028f, -0.196092f, -0.284789f, -0.385911f,
            -0.496998f, -0.615390f, -0.738279f, -0.862769f, -0.985931f, -1.104866f, -1.216760f,
            -1.318944f, -1.408948f, -1.484548f, -1.543813f, -1.585145f, -1.607309f, -1.609460f,
            -1.591158f, -1.552378f, -1.493509f, -1.415347f, -1.319081f, -1.206263f, -1.078781f,
            -0.938819f, -0.788814f, -0.631404f, -0.469377f, -0.305611f, -0.143020f, 0.015506f,
            0.167164f, 0.309289f, 0.439410f, 0.555303f, 0.655031f, 0.736985f, 0.799919f, 0.842970f,
            0.865682f, 0.868008f, 0.850315f, 0.813377f, 0.758354f, 0.686776f, 0.600506f, 0.501702f,
            0.392778f, 0.276351f, 0.155186f, 0.032148f, -0.089865f, -0.207977f, -0.319391f, -0.421448f,
            -0.511678f, -0.587854f, -0.648033f, -0.690599f, -0.714291f, -0.718233f, -0.701948f,
            -0.665371f, -0.608846f, -0.533122f, -0.439337f, -0.328994f, -0.203931f, -0.066283f,
            0.081561f, 0.237006f, 0.397304f, 0.559611f, 0.721043f, 0.878734f, 1.029897f, 1.171876f,
            1.302206f, 1.418655f, 1.519276f, 1.602442f, 1.666882f, 1.711703f, 1.736412f, 1.740922f,
            1.725556f, 1.691039f, 1.638485f, 1.569372f, 1.485512f, 1.389017f, 1.282252f, 1.167791f,
            1.048360f, 0.926788f, 0.805943f, 0.688678f,
        };

        SynthesizerSettings setting(44100);
        BiQuadFilter filter(setting);

        filter.clearBuffer();
        filter.setLowPassFilter(1000.0f, decibels_to_linear(50.0f));

        filter.process(buffer, 101);

        for (int i = 0; i < 101; ++i)
            REQUIRE(buffer[i] == Approx(ref[i]).margin(0.0001f));
    }
}

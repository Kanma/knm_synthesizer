/*
 * SPDX-FileCopyrightText: 2025 Philip Abbet <philip.abbet@gmail.com>
 *
 * SPDX-FileContributor: Philip Abbet <philip.abbet@gmail.com>
 *
 * SPDX-License-Identifier: MIT
*/


static float ref_A4[] = {
    -1.0000f, -0.9600f, -0.9200f, -0.8799f, -0.8400f, -0.8000f, -0.7599f, -0.7200f, -0.6800f,
    -0.6400f, -0.6000f, -0.5600f, -0.5200f, -0.4800f, -0.4400f, -0.4000f, -0.3600f, -0.3200f,
    -0.2800f, -0.2400f, -0.2000f, -0.1600f, -0.1200f, -0.0800f, -0.0400f, -0.0000f, 0.0399f,
    0.0800f, 0.1200f, 0.1599f, 0.2000f, 0.2400f, 0.2799f, 0.3199f, 0.3600f, 0.3999f, 0.4399f,
    0.4799f, 0.5199f, 0.5599f, 0.5999f, 0.6399f, 0.6799f, 0.7199f, 0.7599f, 0.7999f, 0.8399f,
    0.8799f, 0.9199f, 0.9599f, -1.0000f, -0.9600f, -0.9200f, -0.8799f, -0.8400f, -0.8000f,
    -0.7599f, -0.7200f, -0.6800f, -0.6400f, -0.6000f, -0.5600f, -0.5200f, -0.4800f,

    -0.4400f, -0.4000f, -0.3600f, -0.3200f, -0.2800f, -0.2400f, -0.2000f, -0.1600f, -0.1200f,
    -0.0800f, -0.0400f, -0.0000f, 0.0399f, 0.0800f, 0.1200f, 0.1599f, 0.2000f, 0.2400f,
    0.2799f, 0.3199f, 0.3600f, 0.3999f, 0.4399f, 0.4799f, 0.5199f, 0.5599f, 0.5999f, 0.6399f,
    0.6799f, 0.7199f, 0.7599f, 0.7999f, 0.8399f, 0.8799f, 0.9199f, 0.9599f, -1.0000f,
    -0.9600f, -0.9200f, -0.8799f, -0.8400f, -0.8000f, -0.7599f, -0.7200f, -0.6800f, -0.6400f,
    -0.6000f, -0.5600f, -0.5200f, -0.4800f, -0.4400f, -0.4000f, -0.3600f, -0.3200f, -0.2800f,
    -0.2400f, -0.2000f, -0.1600f, -0.1200f, -0.0800f, -0.0400f, -0.0000f, 0.0399f, 0.0800f,

    0.1200f, 0.1599f, 0.2000f, 0.2400f, 0.2799f, 0.3199f, 0.3600f, 0.3999f, 0.4399f, 0.4799f,
    0.5199f, 0.5599f, 0.5999f, 0.6399f, 0.6799f, 0.7199f, 0.7599f, 0.7999f, 0.8399f, 0.8799f,
    0.9199f, 0.9599f, -1.0000f, -0.9600f, -0.9200f, -0.8799f, -0.8400f, -0.8000f, -0.7599f,
    -0.7200f, -0.6800f, -0.6400f, -0.6000f, -0.5600f, -0.5200f, -0.4800f, -0.4400f, -0.4000f,
    -0.3600f, -0.3200f, -0.2800f, -0.2400f, -0.2000f, -0.1600f, -0.1200f, -0.0800f, -0.0400f,
    -0.0000f, 0.0399f, 0.0800f, 0.1200f, 0.1599f, 0.2000f, 0.2400f, 0.2799f, 0.3199f,
    0.3600f, 0.3999f, 0.4399f, 0.4799f, 0.5199f, 0.5599f, 0.5999f, 0.6399f,

    0.6799f, 0.7199f, 0.7599f, 0.7999f, 0.8399f, 0.8799f, 0.9199f, 0.9599f, -1.0000f,
    -0.9600f, -0.9200f, -0.8799f, -0.8400f, -0.8000f, -0.7599f, -0.7200f, -0.6800f, -0.6400f,
    -0.6000f, -0.5600f, -0.5200f, -0.4800f, -0.4400f, -0.4000f, -0.3600f, -0.3200f, -0.2800f,
    -0.2400f, -0.2000f, -0.1600f, -0.1200f, -0.0800f, -0.0400f, -0.0000f, 0.0399f, 0.0800f,
    0.1200f, 0.1599f, 0.2000f, 0.2400f, 0.2799f, 0.3199f, 0.3600f, 0.3999f, 0.4399f, 0.4799f,
    0.5199f, 0.5599f, 0.5999f, 0.6399f, 0.6799f, 0.7199f, 0.7599f, 0.7999f, 0.8399f, 0.8799f,
    0.9199f, 0.9599f, -1.0000f, -0.9600f, -0.9200f, -0.8799f, -0.8400f, -0.8000f,

    -0.7599f, -0.7200f, -0.6800f, -0.6400f, -0.6000f, -0.5600f, -0.5200f, -0.4800f, -0.4400f,
    -0.4000f, -0.3600f, -0.3200f, -0.2800f, -0.2400f, -0.2000f, -0.1600f, -0.1200f, -0.0800f,
    -0.0400f, -0.0000f, 0.0399f, 0.0800f, 0.1200f, 0.1599f, 0.2000f, 0.2400f, 0.2799f,
    0.3199f, 0.3600f, 0.3999f, 0.4399f, 0.4799f, 0.5199f, 0.5599f, 0.5999f, 0.6399f, 0.6799f,
    0.7199f, 0.7599f, 0.7999f, 0.8399f, 0.8799f, 0.9199f, 0.9599f, -1.0000f, -0.9600f,
    -0.9200f, -0.8799f, -0.8400f, -0.8000f, -0.7599f, -0.7200f, -0.6800f, -0.6400f, -0.6000f,
    -0.5600f, -0.5200f, -0.4800f, -0.4400f, -0.4000f, -0.3600f, -0.3200f, -0.2800f, -0.2400f,

    -0.2000f, -0.1600f, -0.1200f, -0.0800f, -0.0400f, -0.0000f, 0.0399f, 0.0800f, 0.1200f,
    0.1599f, 0.2000f, 0.2400f, 0.2799f, 0.3199f, 0.3600f, 0.3999f, 0.4399f, 0.4799f, 0.5199f,
    0.5599f, 0.5999f, 0.6399f, 0.6799f, 0.7199f, 0.7599f, 0.7999f, 0.8399f, 0.8799f, 0.9199f,
    0.9599f, -1.0000f, -0.9600f, -0.9200f, -0.8799f, -0.8400f, -0.8000f, -0.7599f, -0.7200f,
    -0.6800f, -0.6400f, -0.6000f, -0.5600f, -0.5200f, -0.4800f, -0.4400f, -0.4000f, -0.3600f,
    -0.3200f, -0.2800f, -0.2400f, -0.2000f, -0.1600f, -0.1200f, -0.0800f, -0.0400f, -0.0000f,
    0.0399f, 0.0800f, 0.1200f, 0.1599f, 0.2000f, 0.2400f, 0.2799f, 0.3199f,

    0.3600f, 0.3999f, 0.4399f, 0.4799f, 0.5199f, 0.5599f, 0.5999f, 0.6399f, 0.6799f, 0.7199f,
    0.7599f, 0.7999f, 0.8399f, 0.8799f, 0.9199f, 0.9599f, -1.0000f, -0.9600f, -0.9200f,
    -0.8799f, -0.8400f, -0.8000f, -0.7599f, -0.7200f, -0.6800f, -0.6400f, -0.6000f, -0.5600f,
    -0.5200f, -0.4800f, -0.4400f, -0.4000f, -0.3600f, -0.3200f, -0.2800f, -0.2400f, -0.2000f,
    -0.1600f, -0.1200f, -0.0800f, -0.0400f, -0.0000f, 0.0399f, 0.0800f, 0.1200f, 0.1599f,
    0.2000f, 0.2400f, 0.2799f, 0.3199f, 0.3600f, 0.3999f, 0.4399f, 0.4799f, 0.5199f, 0.5599f,
    0.5999f, 0.6399f, 0.6799f, 0.7199f, 0.7599f, 0.7999f, 0.8399f, 0.8799f,

    0.9199f, 0.9599f, -1.0000f, -0.9600f, -0.9200f, -0.8799f, -0.8400f, -0.8000f, -0.7599f,
    -0.7200f, -0.6800f, -0.6400f, -0.6000f, -0.5600f, -0.5200f, -0.4800f, -0.4400f, -0.4000f,
    -0.3600f, -0.3200f, -0.2800f, -0.2400f, -0.2000f, -0.1600f, -0.1200f, -0.0800f, -0.0400f,
    -0.0000f, 0.0399f, 0.0800f, 0.1200f, 0.1599f, 0.2000f, 0.2400f, 0.2799f, 0.3199f,
    0.3600f, 0.3999f, 0.4399f, 0.4799f, 0.5199f, 0.5599f, 0.5999f, 0.6399f, 0.6799f, 0.7199f,
    0.7599f, 0.7999f, 0.8399f, 0.8799f, 0.9199f, 0.9599f, -1.0000f, -0.9600f, -0.9200f,
    -0.8799f, -0.8400f, -0.8000f, -0.7599f, -0.7200f, -0.6800f, -0.6400f, -0.6000f, -0.5600f,

    -0.5200f, -0.4800f, -0.4400f, -0.4000f, -0.3600f, -0.3200f, -0.2800f, -0.2400f, -0.2000f,
    -0.1600f, -0.1200f, -0.0800f, -0.0400f, -0.0000f, 0.0399f, 0.0800f, 0.1200f, 0.1599f,
    0.2000f, 0.2400f, 0.2799f, 0.3199f, 0.3600f, 0.3999f, 0.4399f, 0.4799f, 0.5199f, 0.5599f,
    0.5999f, 0.6399f, 0.6799f, 0.7199f, 0.7599f, 0.7999f, 0.8399f, 0.8799f, 0.9199f, 0.9599f,
    -1.0000f, -0.9600f, -0.9200f, -0.8799f, -0.8400f, -0.8000f, -0.7599f, -0.7200f, -0.6800f,
    -0.6400f, -0.6000f, -0.5600f, -0.5200f, -0.4800f, -0.4400f, -0.4000f, -0.3600f, -0.3200f,
    -0.2800f, -0.2400f, -0.2000f, -0.1600f, -0.1200f, -0.0800f, -0.0400f, -0.0000f,

    0.0399f, 0.0800f, 0.1200f, 0.1599f, 0.2000f, 0.2400f, 0.2799f, 0.3199f, 0.3600f, 0.3999f,
    0.4399f, 0.4799f, 0.5199f, 0.5599f, 0.5999f, 0.6399f, 0.6799f, 0.7199f, 0.7599f, 0.7999f,
    0.8399f, 0.8799f, 0.9199f, 0.9599f, -1.0000f, -0.9600f, -0.9200f, -0.8799f, -0.8400f,
    -0.8000f, -0.7599f, -0.7200f, -0.6800f, -0.6400f, -0.6000f, -0.5600f, -0.5200f, -0.4800f,
    -0.4400f, -0.4000f, -0.3600f, -0.3200f, -0.2800f, -0.2400f, -0.2000f, -0.1600f, -0.1200f,
    -0.0800f, -0.0400f, -0.0000f, 0.0399f, 0.0800f, 0.1200f, 0.1599f, 0.2000f, 0.2400f,
    0.2799f, 0.3199f, 0.3600f, 0.3999f, 0.4399f, 0.4799f, 0.5199f, 0.5599f,
};


static float ref_C4[] = {
    -1.0000f, -0.9762f, -0.9524f, -0.9286f, -0.9048f, -0.8810f, -0.8573f, -0.8335f, -0.8097f,
    -0.7859f, -0.7621f, -0.7383f, -0.7146f, -0.6908f, -0.6670f, -0.6432f, -0.6194f, -0.5956f,
    -0.5718f, -0.5481f, -0.5243f, -0.5005f, -0.4767f, -0.4529f, -0.4292f, -0.4054f, -0.3816f,
    -0.3578f, -0.3340f, -0.3102f, -0.2865f, -0.2627f, -0.2389f, -0.2151f, -0.1913f, -0.1675f,
    -0.1438f, -0.1200f, -0.0962f, -0.0724f, -0.0486f, -0.0248f, -0.0011f, 0.0227f, 0.0465f,
    0.0702f, 0.0940f, 0.1178f, 0.1416f, 0.1654f, 0.1892f, 0.2129f, 0.2367f, 0.2605f, 0.2843f,
    0.3081f, 0.3319f, 0.3556f, 0.3794f, 0.4032f, 0.4270f, 0.4508f, 0.4746f, 0.4983f,

    0.5221f, 0.5459f, 0.5697f, 0.5935f, 0.6173f, 0.6410f, 0.6648f, 0.6886f, 0.7124f, 0.7362f,
    0.7599f, 0.7837f, 0.8075f, 0.8313f, 0.8551f, 0.8789f, 0.9027f, 0.9264f, 0.9502f, 0.9740f,
    -0.7889f, -0.9783f, -0.9545f, -0.9307f, -0.9070f, -0.8832f, -0.8594f, -0.8356f, -0.8118f,
    -0.7880f, -0.7642f, -0.7405f, -0.7167f, -0.6929f, -0.6691f, -0.6453f, -0.6215f, -0.5978f,
    -0.5740f, -0.5502f, -0.5264f, -0.5026f, -0.4789f, -0.4551f, -0.4313f, -0.4075f, -0.3837f,
    -0.3599f, -0.3361f, -0.3124f, -0.2886f, -0.2648f, -0.2410f, -0.2172f, -0.1935f, -0.1697f,
    -0.1459f, -0.1221f, -0.0983f, -0.0745f, -0.0508f, -0.0270f, -0.0032f, 0.0205f,

    0.0443f, 0.0681f, 0.0919f, 0.1157f, 0.1395f, 0.1632f, 0.1870f, 0.2108f, 0.2346f, 0.2584f,
    0.2822f, 0.3059f, 0.3297f, 0.3535f, 0.3773f, 0.4011f, 0.4249f, 0.4486f, 0.4724f, 0.4962f,
    0.5200f, 0.5438f, 0.5676f, 0.5913f, 0.6151f, 0.6389f, 0.6627f, 0.6865f, 0.7103f, 0.7340f,
    0.7578f, 0.7816f, 0.8054f, 0.8292f, 0.8530f, 0.8767f, 0.9005f, 0.9243f, 0.9481f, 0.9719f,
    -0.5778f, -0.9804f, -0.9567f, -0.9329f, -0.9091f, -0.8853f, -0.8615f, -0.8377f, -0.8139f,
    -0.7902f, -0.7664f, -0.7426f, -0.7188f, -0.6950f, -0.6713f, -0.6475f, -0.6237f, -0.5999f,
    -0.5761f, -0.5523f, -0.5285f, -0.5048f, -0.4810f, -0.4572f,

    -0.4334f, -0.4096f, -0.3858f, -0.3621f, -0.3383f, -0.3145f, -0.2907f, -0.2669f, -0.2432f,
    -0.2194f, -0.1956f, -0.1718f, -0.1480f, -0.1242f, -0.1004f, -0.0767f, -0.0529f, -0.0291f,
    -0.0053f, 0.0184f, 0.0422f, 0.0660f, 0.0898f, 0.1135f, 0.1373f, 0.1611f, 0.1849f,
    0.2087f, 0.2325f, 0.2562f, 0.2800f, 0.3038f, 0.3276f, 0.3514f, 0.3752f, 0.3989f, 0.4227f,
    0.4465f, 0.4703f, 0.4941f, 0.5179f, 0.5417f, 0.5654f, 0.5892f, 0.6130f, 0.6368f, 0.6606f,
    0.6843f, 0.7081f, 0.7319f, 0.7557f, 0.7795f, 0.8033f, 0.8270f, 0.8508f, 0.8746f, 0.8984f,
    0.9222f, 0.9460f, 0.9697f, -0.3668f, -0.9826f, -0.9588f, -0.9350f,

    -0.9112f, -0.8874f, -0.8636f, -0.8399f, -0.8161f, -0.7923f, -0.7685f, -0.7447f, -0.7210f,
    -0.6972f, -0.6734f, -0.6496f, -0.6258f, -0.6020f, -0.5782f, -0.5545f, -0.5307f, -0.5069f,
    -0.4831f, -0.4593f, -0.4356f, -0.4118f, -0.3880f, -0.3642f, -0.3404f, -0.3166f, -0.2929f,
    -0.2691f, -0.2453f, -0.2215f, -0.1977f, -0.1739f, -0.1501f, -0.1264f, -0.1026f, -0.0788f,
    -0.0550f, -0.0312f, -0.0075f, 0.0163f, 0.0401f, 0.0639f, 0.0876f, 0.1114f, 0.1352f,
    0.1590f, 0.1828f, 0.2065f, 0.2303f, 0.2541f, 0.2779f, 0.3017f, 0.3255f, 0.3492f, 0.3730f,
    0.3968f, 0.4206f, 0.4444f, 0.4682f, 0.4919f, 0.5157f, 0.5395f, 0.5633f, 0.5871f,

    0.6109f, 0.6346f, 0.6584f, 0.6822f, 0.7060f, 0.7298f, 0.7536f, 0.7773f, 0.8011f, 0.8249f,
    0.8487f, 0.8725f, 0.8963f, 0.9200f, 0.9438f, 0.9676f, -0.1557f, -0.9847f, -0.9609f,
    -0.9371f, -0.9133f, -0.8896f, -0.8658f, -0.8420f, -0.8182f, -0.7944f, -0.7706f, -0.7469f,
    -0.7231f, -0.6993f, -0.6755f, -0.6517f, -0.6279f, -0.6042f, -0.5804f, -0.5566f, -0.5328f,
    -0.5090f, -0.4853f, -0.4615f, -0.4377f, -0.4139f, -0.3901f, -0.3663f, -0.3425f, -0.3188f,
    -0.2950f, -0.2712f, -0.2474f, -0.2236f, -0.1998f, -0.1761f, -0.1523f, -0.1285f, -0.1047f,
    -0.0809f, -0.0572f, -0.0334f, -0.0096f, 0.0142f, 0.0379f, 0.0617f, 0.0855f, 0.1093f,

    0.1331f, 0.1568f, 0.1806f, 0.2044f, 0.2282f, 0.2520f, 0.2758f, 0.2996f, 0.3233f, 0.3471f,
    0.3709f, 0.3947f, 0.4185f, 0.4422f, 0.4660f, 0.4898f, 0.5136f, 0.5374f, 0.5612f, 0.5849f,
    0.6087f, 0.6325f, 0.6563f, 0.6801f, 0.7039f, 0.7277f, 0.7514f, 0.7752f, 0.7990f, 0.8228f,
    0.8466f, 0.8703f, 0.8941f, 0.9179f, 0.9417f, 0.9655f, 0.0553f, -0.9868f, -0.9631f,
    -0.9392f, -0.9155f, -0.8917f, -0.8679f, -0.8441f, -0.8203f, -0.7966f, -0.7728f, -0.7490f,
    -0.7252f, -0.7014f, -0.6776f, -0.6539f, -0.6301f, -0.6063f, -0.5825f, -0.5587f, -0.5350f,
    -0.5112f, -0.4874f, -0.4636f, -0.4398f, -0.4160f, -0.3922f, -0.3685f,

    -0.3447f, -0.3209f, -0.2971f, -0.2733f, -0.2496f, -0.2258f, -0.2020f, -0.1782f, -0.1544f,
    -0.1306f, -0.1068f, -0.0831f, -0.0593f, -0.0355f, -0.0117f, 0.0120f, 0.0358f, 0.0596f,
    0.0834f, 0.1071f, 0.1309f, 0.1547f, 0.1785f, 0.2023f, 0.2261f, 0.2499f, 0.2736f, 0.2974f,
    0.3212f, 0.3450f, 0.3688f, 0.3925f, 0.4163f, 0.4401f, 0.4639f, 0.4877f, 0.5115f, 0.5353f,
    0.5590f, 0.5828f, 0.6066f, 0.6304f, 0.6542f, 0.6779f, 0.7017f, 0.7255f, 0.7493f, 0.7731f,
    0.7969f, 0.8206f, 0.8444f, 0.8682f, 0.8920f, 0.9158f, 0.9396f, 0.9634f, 0.2664f, -0.9890f,
    -0.9652f, -0.9414f, -0.9176f, -0.8938f, -0.8700f, -0.8463f,

    -0.8225f, -0.7987f, -0.7749f, -0.7511f, -0.7273f, -0.7036f, -0.6798f, -0.6560f, -0.6322f,
    -0.6084f, -0.5846f, -0.5609f, -0.5371f, -0.5133f, -0.4895f, -0.4657f, -0.4419f, -0.4182f,
    -0.3944f, -0.3706f, -0.3468f, -0.3230f, -0.2993f, -0.2755f, -0.2517f, -0.2279f, -0.2041f,
    -0.1803f, -0.1565f, -0.1328f, -0.1090f, -0.0852f, -0.0614f, -0.0376f, -0.0139f, 0.0099f,
    0.0337f, 0.0575f, 0.0812f, 0.1050f, 0.1288f, 0.1526f, 0.1764f, 0.2002f, 0.2239f, 0.2477f,
    0.2715f, 0.2953f, 0.3191f, 0.3428f, 0.3666f, 0.3904f, 0.4142f, 0.4380f, 0.4618f, 0.4856f,
    0.5093f, 0.5331f, 0.5569f, 0.5807f, 0.6045f, 0.6282f, 0.6520f, 0.6758f,

    0.6996f, 0.7234f, 0.7472f, 0.7709f, 0.7947f, 0.8185f, 0.8423f, 0.8661f, 0.8899f, 0.9136f,
    0.9374f, 0.9612f, 0.4775f, -0.9911f, -0.9673f, -0.9435f, -0.9197f, -0.8960f, -0.8722f,
    -0.8484f, -0.8246f, -0.8008f, -0.7770f, -0.7533f, -0.7295f, -0.7057f, -0.6819f, -0.6581f,
    -0.6343f, -0.6106f, -0.5868f, -0.5630f, -0.5392f, -0.5154f, -0.4916f, -0.4679f, -0.4441f,
    -0.4203f, -0.3965f, -0.3727f, -0.3489f, -0.3252f, -0.3014f, -0.2776f, -0.2538f, -0.2300f,
    -0.2062f, -0.1825f, -0.1587f, -0.1349f, -0.1111f, -0.0873f, -0.0636f, -0.0398f, -0.0160f,
    0.0078f, 0.0315f, 0.0553f, 0.0791f, 0.1029f, 0.1267f, 0.1504f, 0.1742f, 0.1980f,
};


TEST_CASE("Voice")
{
    SynthesizerSettings settings(22050);
    Synthesizer synthesizer(settings);

    REQUIRE(synthesizer.loadSoundFont(DATA_DIR "440_16bits.sf2"));

    const knm::sf::SoundFont& soundfont = synthesizer.soundfont();


    SECTION("Mono, A4")
    {
        // Note: the sample in the file is an A4, so no pitch tuning is performed
        Voice voice(&synthesizer);

        const float* block = voice.block_left();

        knm::sf::key_info_t key_info;
        REQUIRE(soundfont.getKeyInfo(0, 1, 69, 100, key_info));

        voice.start(key_info, soundfont.getBuffer(), 0, 69, 100);

        REQUIRE(!voice.stereo());

        for (int j = 0; j < 10; ++j)
        {
            REQUIRE(voice.process());

            REQUIRE(voice.currentMixGainLeft() == Approx(0.33726f).margin(0.0001f));
            REQUIRE(voice.currentMixGainRight() == Approx(0.33722f).margin(0.0001f));

            for (int i = 0; i < settings.blockSize(); ++i)
                REQUIRE(block[i] == Approx(ref_A4[j * settings.blockSize() + i]).margin(0.0001f));
        }
    }

    SECTION("Mono, C4")
    {
        // Note: the sample in the file is an A4, so some pitch tuning is performed
        Voice voice(&synthesizer);
        const float* block = voice.block_left();

        knm::sf::key_info_t key_info;
        REQUIRE(soundfont.getKeyInfo(0, 1, 69, 100, key_info));

        SECTION("low offsets")
        {
            voice.start(key_info, soundfont.getBuffer(), 0, 60, 100);

            REQUIRE(!voice.stereo());

            for (int j = 0; j < 10; ++j)
            {
                REQUIRE(voice.process());

                REQUIRE(voice.currentMixGainLeft() == Approx(0.33726f).margin(0.0001f));
                REQUIRE(voice.currentMixGainRight() == Approx(0.33722f).margin(0.0001f));

                for (int i = 0; i < settings.blockSize(); ++i)
                    REQUIRE(block[i] == Approx(ref_C4[j * settings.blockSize() + i]).margin(0.005f));
            }
        }

        SECTION("high offsets")
        {
            // This catch an issue with the precision of the Sampler's current index
            const uint32_t OFFSET = 606827;

            knm::sf::sample_t sample = *key_info.left.sample;

            sample.start += OFFSET;
            sample.end += OFFSET;
            sample.loop_start += OFFSET;
            sample.loop_end += OFFSET;

            key_info.left.sample = &sample;

            voice.start(key_info, soundfont.getBuffer() - OFFSET, 0, 60, 100);

            REQUIRE(!voice.stereo());

            for (int j = 0; j < 10; ++j)
            {
                REQUIRE(voice.process());

                REQUIRE(voice.currentMixGainLeft() == Approx(0.33726f).margin(0.0001f));
                REQUIRE(voice.currentMixGainRight() == Approx(0.33722f).margin(0.0001f));

                for (int i = 0; i < settings.blockSize(); ++i)
                    REQUIRE(block[i] == Approx(ref_C4[j * settings.blockSize() + i]).margin(0.0001f));
            }
        }
    }

    SECTION("Stereo, A4")
    {
        // Note: the sample in the file is an A4, so no pitch tuning is performed
        Voice voice(&synthesizer);

        const float* left = voice.block_left();
        const float* right = voice.block_right();

        knm::sf::key_info_t key_info;
        REQUIRE(soundfont.getKeyInfo(0, 0, 69, 100, key_info));

        voice.start(key_info, soundfont.getBuffer(), 0, 69, 100);

        REQUIRE(voice.stereo());

        for (int j = 0; j < 10; ++j)
        {
            REQUIRE(voice.process());

            REQUIRE(voice.currentMixGainLeft() == Approx(0.476929f).margin(0.0001f));
            REQUIRE(voice.currentMixGainRight() == Approx(0.476924f).margin(0.0001f));

            for (int i = 0; i < settings.blockSize(); ++i)
            {
                REQUIRE(left[i] == Approx(ref_A4[j * settings.blockSize() + i]).margin(0.0001f));
                REQUIRE(right[i] == Approx(ref_A4[j * settings.blockSize() + i]).margin(0.0001f));
            }
        }
    }

    SECTION("Stereo, C4")
    {
        // Note: the sample in the file is an A4, so some pitch tuning is performed
        Voice voice(&synthesizer);

        const float* left = voice.block_left();
        const float* right = voice.block_right();

        knm::sf::key_info_t key_info;
        REQUIRE(soundfont.getKeyInfo(0, 0, 69, 100, key_info));

        SECTION("low offsets")
        {
            voice.start(key_info, soundfont.getBuffer(), 0, 60, 100);

            REQUIRE(voice.stereo());

            for (int j = 0; j < 10; ++j)
            {
                REQUIRE(voice.process());

                REQUIRE(voice.currentMixGainLeft() == Approx(0.47693f).margin(0.0001f));
                REQUIRE(voice.currentMixGainRight() == Approx(0.47692f).margin(0.0001f));

                for (int i = 0; i < settings.blockSize(); ++i)
                {
                    REQUIRE(left[i] == Approx(ref_C4[j * settings.blockSize() + i]).margin(0.0001f));
                    REQUIRE(right[i] == Approx(ref_C4[j * settings.blockSize() + i]).margin(0.0001f));
                }
            }
        }

        SECTION("high offsets")
        {
            // This catch an issue with the precision of the Sampler's current index
            const uint32_t OFFSET = 606827;

            knm::sf::sample_t left_sample = *key_info.left.sample;

            left_sample.start += OFFSET;
            left_sample.end += OFFSET;
            left_sample.loop_start += OFFSET;
            left_sample.loop_end += OFFSET;

            key_info.left.sample = &left_sample;

            knm::sf::sample_t right_sample = *key_info.right.sample;

            right_sample.start += OFFSET;
            right_sample.end += OFFSET;
            right_sample.loop_start += OFFSET;
            right_sample.loop_end += OFFSET;

            key_info.right.sample = &right_sample;

            voice.start(key_info, soundfont.getBuffer() - OFFSET, 0, 60, 100);

            REQUIRE(voice.stereo());

            for (int j = 0; j < 10; ++j)
            {
                REQUIRE(voice.process());

                REQUIRE(voice.currentMixGainLeft() == Approx(0.47693f).margin(0.0001f));
                REQUIRE(voice.currentMixGainRight() == Approx(0.47692f).margin(0.0001f));

                for (int i = 0; i < settings.blockSize(); ++i)
                {
                    REQUIRE(left[i] == Approx(ref_C4[j * settings.blockSize() + i]).margin(0.0001f));
                    REQUIRE(right[i] == Approx(ref_C4[j * settings.blockSize() + i]).margin(0.0001f));
                }
            }
        }
    }
}

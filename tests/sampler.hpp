/*
 * SPDX-FileCopyrightText: 2025 Philip Abbet <philip.abbet@gmail.com>
 *
 * SPDX-FileContributor: Philip Abbet <philip.abbet@gmail.com>
 *
 * SPDX-License-Identifier: MIT
*/

TEST_CASE("Sampler")
{
    float buffer[101];
    
    for (int i = 0; i < 101; ++i)
        buffer[i] = -1.0f + 0.02f * i;


    SECTION("Same sample rate & pitch")
    {
        float ref1[] = {
            -1.00f, -0.98f, -0.96f, -0.94f, -0.92f, -0.90f, -0.88f, -0.86f, -0.84f, -0.82f, -0.80f,
            -0.78f, -0.76f, -0.74f, -0.72f, -0.70f, -0.68f, -0.66f, -0.64f, -0.62f, -0.60f, -0.58f,
            -0.56f, -0.54f, -0.52f, -0.50f, -0.48f, -0.46f, -0.44f, -0.42f, -0.40f, -0.38f, -0.36f,
            -0.34f, -0.32f, -0.30f, -0.28f, -0.26f, -0.24f, -0.22f, -0.20f, -0.18f, -0.16f, -0.14f,
            -0.12f, -0.10f, -0.08f, -0.06f, -0.04f, -0.02f, 0.00f, 0.02f, 0.04f, 0.06f, 0.08f,
            0.10f, 0.12f, 0.14f, 0.16f, 0.18f, 0.20f, 0.22f, 0.24f, 0.26f,
        };

        float ref2[] = {
            0.28f, 0.30f, 0.32f, 0.34f, 0.36f, 0.38f, 0.40f, 0.42f, 0.44f, 0.46f, 0.48f, 0.50f,
            0.52f, 0.54f, 0.56f, 0.58f, 0.60f, 0.62f, 0.64f, 0.66f, 0.68f, 0.70f, 0.72f, 0.74f,
            0.76f, 0.78f, 0.80f, 0.82f, 0.84f, 0.86f, 0.88f, 0.90f, 0.92f, 0.94f, 0.96f, 0.98f,
            -1.00f, -0.98f, -0.96f, -0.94f, -0.92f, -0.90f, -0.88f, -0.86f, -0.84f, -0.82f, -0.80f,
            -0.78f, -0.76f, -0.74f, -0.72f, -0.70f, -0.68f, -0.66f, -0.64f, -0.62f, -0.60f, -0.58f,
            -0.56f, -0.54f, -0.52f, -0.50f, -0.48f, -0.46f,
        };

        Sampler sampler(44100);
        sampler.start(buffer, 0, 101, LOOP_MODE_UNTIL_RELEASE, 0, 100, 44100, 69, 0, 0, 100);

        float result[64];

        sampler.process(result, 64, 69);

        for (int i = 0; i < 64; ++i)
            REQUIRE(result[i] == Approx(ref1[i]).margin(0.0001f));

        sampler.process(result, 64, 69);

        for (int i = 0; i < 64; ++i)
            REQUIRE(result[i] == Approx(ref2[i]).margin(0.0001f));
    }

    SECTION("Half sample rate, same pitch")
    {
        float ref1[] = {
            -1.00f, -0.96f, -0.92f, -0.88f, -0.84f, -0.80f, -0.76f, -0.72f, -0.68f, -0.64f, -0.60f,
            -0.56f, -0.52f, -0.48f, -0.44f, -0.40f, -0.36f, -0.32f, -0.28f, -0.24f, -0.20f, -0.16f,
            -0.12f, -0.08f, -0.04f, 0.00f, 0.04f, 0.08f, 0.12f, 0.16f, 0.20f, 0.24f, 0.28f, 0.32f,
            0.36f, 0.40f, 0.44f, 0.48f, 0.52f, 0.56f, 0.60f, 0.64f, 0.68f, 0.72f, 0.76f, 0.80f,
            0.84f, 0.88f, 0.92f, 0.96f, -1.00f, -0.96f, -0.92f, -0.88f, -0.84f, -0.80f, -0.76f,
            -0.72f, -0.68f, -0.64f, -0.60f, -0.56f, -0.52f, -0.48f,
        };

        float ref2[] = {
            -0.44f, -0.40f, -0.36f, -0.32f, -0.28f, -0.24f, -0.20f, -0.16f, -0.12f, -0.08f, -0.04f,
            0.00f, 0.04f, 0.08f, 0.12f, 0.16f, 0.20f, 0.24f, 0.28f, 0.32f, 0.36f, 0.40f, 0.44f,
            0.48f, 0.52f, 0.56f, 0.60f, 0.64f, 0.68f, 0.72f, 0.76f, 0.80f, 0.84f, 0.88f, 0.92f,
            0.96f, -1.00f, -0.96f, -0.92f, -0.88f, -0.84f, -0.80f, -0.76f, -0.72f, -0.68f, -0.64f,
            -0.60f, -0.56f, -0.52f, -0.48f, -0.44f, -0.40f, -0.36f, -0.32f, -0.28f, -0.24f, -0.20f,
            -0.16f, -0.12f, -0.08f, -0.04f, 0.00f, 0.04f, 0.08f,
        };

        Sampler sampler(22050);
        sampler.start(buffer, 0, 101, LOOP_MODE_UNTIL_RELEASE, 0, 100, 44100, 69, 0, 0, 100);

        float result[64];

        sampler.process(result, 64, 69);

        for (int i = 0; i < 64; ++i)
            REQUIRE(result[i] == Approx(ref1[i]).margin(0.0001f));

        sampler.process(result, 64, 69);

        for (int i = 0; i < 64; ++i)
            REQUIRE(result[i] == Approx(ref2[i]).margin(0.0001f));
    }

    SECTION("Double sample rate, same pitch")
    {
        float ref1[] = {
            -1.00f, -0.99f, -0.98f, -0.97f, -0.96f, -0.95f, -0.94f, -0.93f, -0.92f, -0.91f, -0.90f,
            -0.89f, -0.88f, -0.87f, -0.86f, -0.85f, -0.84f, -0.83f, -0.82f, -0.81f, -0.80f, -0.79f,
            -0.78f, -0.77f, -0.76f, -0.75f, -0.74f, -0.73f, -0.72f, -0.71f, -0.70f, -0.69f, -0.68f,
            -0.67f, -0.66f, -0.65f, -0.64f, -0.63f, -0.62f, -0.61f, -0.60f, -0.59f, -0.58f, -0.57f,
            -0.56f, -0.55f, -0.54f, -0.53f, -0.52f, -0.51f, -0.50f, -0.49f, -0.48f, -0.47f, -0.46f,
            -0.45f, -0.44f, -0.43f, -0.42f, -0.41f, -0.40f, -0.39f, -0.38f, -0.37f,
        };

        float ref2[] = {
            -0.36f, -0.35f, -0.34f, -0.33f, -0.32f, -0.31f, -0.30f, -0.29f, -0.28f, -0.27f, -0.26f,
            -0.25f, -0.24f, -0.23f, -0.22f, -0.21f, -0.20f, -0.19f, -0.18f, -0.17f, -0.16f, -0.15f,
            -0.14f, -0.13f, -0.12f, -0.11f, -0.10f, -0.09f, -0.08f, -0.07f, -0.06f, -0.05f, -0.04f,
            -0.03f, -0.02f, -0.01f, 0.00f, 0.01f, 0.02f, 0.03f, 0.04f, 0.05f, 0.06f, 0.07f, 0.08f,
            0.09f, 0.10f, 0.11f, 0.12f, 0.13f, 0.14f, 0.15f, 0.16f, 0.17f, 0.18f, 0.19f, 0.20f,
            0.21f, 0.22f, 0.23f, 0.24f, 0.25f, 0.26f, 0.27f,
        };

        Sampler sampler(44100);
        sampler.start(buffer, 0, 101, LOOP_MODE_UNTIL_RELEASE, 0, 100, 22050, 69, 0, 0, 100);

        float result[64];

        sampler.process(result, 64, 69);

        for (int i = 0; i < 64; ++i)
            REQUIRE(result[i] == Approx(ref1[i]).margin(0.0001f));

        sampler.process(result, 64, 69);

        for (int i = 0; i < 64; ++i)
            REQUIRE(result[i] == Approx(ref2[i]).margin(0.0001f));
    }

    SECTION("Same sample rate, lower pitch")
    {
        float ref1[] = {
            -1.0000f, -0.9881f, -0.9762f, -0.9643f, -0.9524f, -0.9405f, -0.9286f, -0.9168f, -0.9049f,
            -0.8930f, -0.8811f, -0.8692f, -0.8573f, -0.8454f, -0.8335f, -0.8216f, -0.8097f, -0.7978f,
            -0.7859f, -0.7741f, -0.7622f, -0.7503f, -0.7384f, -0.7265f, -0.7146f, -0.7027f, -0.6908f,
            -0.6789f, -0.6670f, -0.6551f, -0.6432f, -0.6313f, -0.6195f, -0.6076f, -0.5957f, -0.5838f,
            -0.5719f, -0.5600f, -0.5481f, -0.5362f, -0.5243f, -0.5124f, -0.5005f, -0.4886f, -0.4767f,
            -0.4649f, -0.4530f, -0.4411f, -0.4292f, -0.4173f, -0.4054f, -0.3935f, -0.3816f, -0.3697f,
            -0.3578f, -0.3459f, -0.3340f, -0.3222f, -0.3103f, -0.2984f, -0.2865f, -0.2746f, -0.2627f,
            -0.2508f,
        };

        float ref2[] = {
            -0.2389f, -0.2270f, -0.2151f, -0.2032f, -0.1913f, -0.1794f, -0.1676f, -0.1557f, -0.1438f,
            -0.1319f, -0.1200f, -0.1081f, -0.0962f, -0.0843f, -0.0724f, -0.0605f, -0.0486f, -0.0367f,
            -0.0249f, -0.0130f, -0.0011f, 0.0108f, 0.0227f, 0.0346f, 0.0465f, 0.0584f, 0.0703f,
            0.0822f, 0.0941f, 0.1060f, 0.1179f, 0.1297f, 0.1416f, 0.1535f, 0.1654f, 0.1773f, 0.1892f,
            0.2011f, 0.2130f, 0.2249f, 0.2368f, 0.2487f, 0.2606f, 0.2725f, 0.2843f, 0.2962f, 0.3081f,
            0.3200f, 0.3319f, 0.3438f, 0.3557f, 0.3676f, 0.3795f, 0.3914f, 0.4033f, 0.4152f, 0.4270f,
            0.4389f, 0.4508f, 0.4627f, 0.4746f, 0.4865f, 0.4984f, 0.5103f,
        };

        Sampler sampler(44100);
        sampler.start(buffer, 0, 101, LOOP_MODE_UNTIL_RELEASE, 0, 100, 44100, 69, 0, 0, 100);

        float result[64];

        sampler.process(result, 64, 60);

        for (int i = 0; i < 64; ++i)
            REQUIRE(result[i] == Approx(ref1[i]).margin(0.0001f));

        sampler.process(result, 64, 60);

        for (int i = 0; i < 64; ++i)
            REQUIRE(result[i] == Approx(ref2[i]).margin(0.0001f));
    }

    SECTION("Same sample rate, bigger pitch")
    {
        float ref1[] = {
            -1.0000f, -0.9664f, -0.9327f, -0.8991f, -0.8655f, -0.8318f, -0.7982f, -0.7645f, -0.7309f,
            -0.6973f, -0.6636f, -0.6300f, -0.5964f, -0.5627f, -0.5291f, -0.4955f, -0.4618f, -0.4282f,
            -0.3946f, -0.3609f, -0.3273f, -0.2936f, -0.2600f, -0.2264f, -0.1927f, -0.1591f, -0.1255f,
            -0.0918f, -0.0582f, -0.0246f, 0.0091f, 0.0427f, 0.0763f, 0.1100f, 0.1436f, 0.1773f,
            0.2109f, 0.2445f, 0.2782f, 0.3118f, 0.3454f, 0.3791f, 0.4127f, 0.4463f, 0.4800f, 0.5136f,
            0.5472f, 0.5809f, 0.6145f, 0.6482f, 0.6818f, 0.7154f, 0.7491f, 0.7827f, 0.8163f, 0.8500f,
            0.8836f, 0.9172f, 0.9509f, 0.5330f, -0.9818f, -0.9482f, -0.9146f, -0.8809f,
        };

        float ref2[] = {
            -0.8473f, -0.8137f, -0.7800f, -0.7464f, -0.7128f, -0.6791f, -0.6455f, -0.6119f, -0.5782f,
            -0.5446f, -0.5109f, -0.4773f, -0.4437f, -0.4100f, -0.3764f, -0.3428f, -0.3091f, -0.2755f,
            -0.2419f, -0.2082f, -0.1746f, -0.1410f, -0.1073f, -0.0737f, -0.0400f, -0.0064f, 0.0272f,
            0.0609f, 0.0945f, 0.1281f, 0.1618f, 0.1954f, 0.2290f, 0.2627f, 0.2963f, 0.3299f, 0.3636f,
            0.3972f, 0.4309f, 0.4645f, 0.4981f, 0.5318f, 0.5654f, 0.5990f, 0.6327f, 0.6663f, 0.6999f,
            0.7336f, 0.7672f, 0.8009f, 0.8345f, 0.8681f, 0.9018f, 0.9354f, 0.9690f, -0.9973f,
            -0.9637f, -0.9301f, -0.8964f, -0.8628f, -0.8292f, -0.7955f, -0.7619f, -0.7282f,
        };

        Sampler sampler(44100);
        sampler.start(buffer, 0, 101, LOOP_MODE_UNTIL_RELEASE, 0, 100, 44100, 69, 0, 0, 100);

        float result[64];

        sampler.process(result, 64, 78);

        for (int i = 0; i < 64; ++i)
            REQUIRE(result[i] == Approx(ref1[i]).margin(0.0001f));

        sampler.process(result, 64, 78);

        for (int i = 0; i < 64; ++i)
            REQUIRE(result[i] == Approx(ref2[i]).margin(0.0001f));
    }

    SECTION("Same sample rate & pitch, with positive tuning")
    {
        float ref1[] = {
            -1.0000f, -0.9747f, -0.9495f, -0.9242f, -0.8989f, -0.8736f, -0.8484f, -0.8231f, -0.7978f,
            -0.7726f, -0.7473f, -0.7220f, -0.6967f, -0.6715f, -0.6462f, -0.6209f, -0.5957f, -0.5704f,
            -0.5451f, -0.5198f, -0.4946f, -0.4693f, -0.4440f, -0.4188f, -0.3935f, -0.3682f, -0.3429f,
            -0.3177f, -0.2924f, -0.2671f, -0.2419f, -0.2166f, -0.1913f, -0.1660f, -0.1408f, -0.1155f,
            -0.0902f, -0.0650f, -0.0397f, -0.0144f, 0.0109f, 0.0361f, 0.0614f, 0.0867f, 0.1119f,
            0.1372f, 0.1625f, 0.1878f, 0.2130f, 0.2383f, 0.2636f, 0.2888f, 0.3141f, 0.3394f, 0.3647f,
            0.3899f, 0.4152f, 0.4405f, 0.4657f, 0.4910f, 0.5163f, 0.5415f, 0.5668f, 0.5921f,
        };

        float ref2[] = {
            0.6174f, 0.6426f, 0.6679f, 0.6932f, 0.7184f, 0.7437f, 0.7690f, 0.7943f, 0.8195f, 0.8448f,
            0.8701f, 0.8953f, 0.9206f, 0.9459f, 0.9712f, -0.6469f, -0.9783f, -0.9530f, -0.9278f,
            -0.9025f, -0.8772f, -0.8519f, -0.8267f, -0.8014f, -0.7761f, -0.7509f, -0.7256f, -0.7003f,
            -0.6750f, -0.6498f, -0.6245f, -0.5992f, -0.5740f, -0.5487f, -0.5234f, -0.4981f, -0.4729f,
            -0.4476f, -0.4223f, -0.3971f, -0.3718f, -0.3465f, -0.3212f, -0.2960f, -0.2707f, -0.2454f,
            -0.2202f, -0.1949f, -0.1696f, -0.1443f, -0.1191f, -0.0938f, -0.0685f, -0.0433f, -0.0180f,
            0.0073f, 0.0326f, 0.0578f, 0.0831f, 0.1084f, 0.1336f, 0.1589f, 0.1842f, 0.2095f,
        };

        Sampler sampler(44100);
        sampler.start(buffer, 0, 101, LOOP_MODE_UNTIL_RELEASE, 0, 100, 44100, 69, 4, 5, 100);

        float result[64];

        sampler.process(result, 64, 69);

        for (int i = 0; i < 64; ++i)
            REQUIRE(result[i] == Approx(ref1[i]).margin(0.0001f));

        sampler.process(result, 64, 69);

        for (int i = 0; i < 64; ++i)
            REQUIRE(result[i] == Approx(ref2[i]).margin(0.0001f));
    }

    SECTION("Same sample rate & pitch, with negative tuning")
    {
        float ref1[] = {
            -1.0000f, -0.9841f, -0.9682f, -0.9522f, -0.9363f, -0.9204f, -0.9045f, -0.8886f, -0.8726f,
            -0.8567f, -0.8408f, -0.8249f, -0.8090f, -0.7930f, -0.7771f, -0.7612f, -0.7453f, -0.7294f,
            -0.7134f, -0.6975f, -0.6816f, -0.6657f, -0.6498f, -0.6338f, -0.6179f, -0.6020f, -0.5861f,
            -0.5702f, -0.5542f, -0.5383f, -0.5224f, -0.5065f, -0.4906f, -0.4746f, -0.4587f, -0.4428f,
            -0.4269f, -0.4110f, -0.3950f, -0.3791f, -0.3632f, -0.3473f, -0.3314f, -0.3154f, -0.2995f,
            -0.2836f, -0.2677f, -0.2518f, -0.2358f, -0.2199f, -0.2040f, -0.1881f, -0.1722f, -0.1562f,
            -0.1403f, -0.1244f, -0.1085f, -0.0926f, -0.0766f, -0.0607f, -0.0448f, -0.0289f, -0.0130f,
            0.0030f,
        };

        float ref2[] = {
            0.0189f, 0.0348f, 0.0507f, 0.0666f, 0.0826f, 0.0985f, 0.1144f, 0.1303f, 0.1462f, 0.1622f,
            0.1781f, 0.1940f, 0.2099f, 0.2258f, 0.2418f, 0.2577f, 0.2736f, 0.2895f, 0.3054f, 0.3214f,
            0.3373f, 0.3532f, 0.3691f, 0.3850f, 0.4010f, 0.4169f, 0.4328f, 0.4487f, 0.4646f, 0.4806f,
            0.4965f, 0.5124f, 0.5283f, 0.5442f, 0.5602f, 0.5761f, 0.5920f, 0.6079f, 0.6238f, 0.6398f,
            0.6557f, 0.6716f, 0.6875f, 0.7034f, 0.7194f, 0.7353f, 0.7512f, 0.7671f, 0.7830f, 0.7990f,
            0.8149f, 0.8308f, 0.8467f, 0.8626f, 0.8786f, 0.8945f, 0.9104f, 0.9263f, 0.9422f, 0.9582f,
            0.9741f, -0.0090f, -0.9941f, -0.9782f,
        };

        Sampler sampler(44100);
        sampler.start(buffer, 0, 101, LOOP_MODE_UNTIL_RELEASE, 0, 100, 44100, 69, -4, 5, 100);

        float result[64];

        sampler.process(result, 64, 69);

        for (int i = 0; i < 64; ++i)
            REQUIRE(result[i] == Approx(ref1[i]).margin(0.001f));

        sampler.process(result, 64, 69);

        for (int i = 0; i < 64; ++i)
            REQUIRE(result[i] == Approx(ref2[i]).margin(0.001f));
    }

    SECTION("Same sample rate, lower pitch, with scale tuning")
    {
        float ref1[] = {
            -1.0000f, -0.9846f, -0.9692f, -0.9537f, -0.9383f, -0.9229f, -0.9075f, -0.8920f, -0.8766f,
            -0.8612f, -0.8458f, -0.8304f, -0.8149f, -0.7995f, -0.7841f, -0.7687f, -0.7532f, -0.7378f,
            -0.7224f, -0.7070f, -0.6916f, -0.6761f, -0.6607f, -0.6453f, -0.6299f, -0.6144f, -0.5990f,
            -0.5836f, -0.5682f, -0.5528f, -0.5373f, -0.5219f, -0.5065f, -0.4911f, -0.4756f, -0.4602f,
            -0.4448f, -0.4294f, -0.4140f, -0.3985f, -0.3831f, -0.3677f, -0.3523f, -0.3368f, -0.3214f,
            -0.3060f, -0.2906f, -0.2752f, -0.2597f, -0.2443f, -0.2289f, -0.2135f, -0.1981f, -0.1826f,
            -0.1672f, -0.1518f, -0.1364f, -0.1209f, -0.1055f, -0.0901f, -0.0747f, -0.0593f, -0.0438f,
            -0.0284f,
        };

        float ref2[] = {
            -0.0130f, 0.0024f, 0.0179f, 0.0333f, 0.0487f, 0.0641f, 0.0795f, 0.0950f, 0.1104f,
            0.1258f, 0.1412f, 0.1567f, 0.1721f, 0.1875f, 0.2029f, 0.2183f, 0.2338f, 0.2492f, 0.2646f,
            0.2800f, 0.2955f, 0.3109f, 0.3263f, 0.3417f, 0.3571f, 0.3726f, 0.3880f, 0.4034f, 0.4188f,
            0.4343f, 0.4497f, 0.4651f, 0.4805f, 0.4959f, 0.5114f, 0.5268f, 0.5422f, 0.5576f, 0.5731f,
            0.5885f, 0.6039f, 0.6193f, 0.6347f, 0.6502f, 0.6656f, 0.6810f, 0.6964f, 0.7119f, 0.7273f,
            0.7427f, 0.7581f, 0.7735f, 0.7890f, 0.8044f, 0.8198f, 0.8352f, 0.8507f, 0.8661f, 0.8815f,
            0.8969f, 0.9123f, 0.9278f, 0.9432f, 0.9586f,
        };

        Sampler sampler(44100);
        sampler.start(buffer, 0, 101, LOOP_MODE_UNTIL_RELEASE, 0, 100, 44100, 69, 0, 0, 50);

        float result[64];

        sampler.process(result, 64, 60);

        for (int i = 0; i < 64; ++i)
            REQUIRE(result[i] == Approx(ref1[i]).margin(0.0001f));

        sampler.process(result, 64, 60);

        for (int i = 0; i < 64; ++i)
            REQUIRE(result[i] == Approx(ref2[i]).margin(0.0001f));
    }

    SECTION("All parameters changed")
    {
        float ref1[] = {
            -1.0000f, -0.9555f, -0.9110f, -0.8665f, -0.8220f, -0.7775f, -0.7330f, -0.6885f, -0.6440f,
            -0.5995f, -0.5550f, -0.5105f, -0.4660f, -0.4215f, -0.3769f, -0.3324f, -0.2879f, -0.2434f,
            -0.1989f, -0.1544f, -0.1099f, -0.0654f, -0.0209f, 0.0236f, 0.0681f, 0.1126f, 0.1571f,
            0.2016f, 0.2461f, 0.2906f, 0.3351f, 0.3796f, 0.4241f, 0.4686f, 0.5131f, 0.5576f, 0.6021f,
            0.6466f, 0.6911f, 0.7356f, 0.7801f, 0.8246f, 0.8692f, 0.9137f, 0.9582f, -0.9973f,
            -0.9528f, -0.9083f, -0.8638f, -0.8193f, -0.7748f, -0.7303f, -0.6858f, -0.6413f, -0.5968f,
            -0.5523f, -0.5078f, -0.4633f, -0.4188f, -0.3743f, -0.3298f, -0.2853f, -0.2408f, -0.1963f,
        };

        float ref2[] = {
            -0.1518f, -0.1073f, -0.0628f, -0.0183f, 0.0262f, 0.0707f, 0.1153f, 0.1598f, 0.2043f,
            0.2488f, 0.2933f, 0.3378f, 0.3823f, 0.4268f, 0.4713f, 0.5158f, 0.5603f, 0.6048f, 0.6493f,
            0.6938f, 0.7383f, 0.7828f, 0.8273f, 0.8718f, 0.9163f, 0.9608f, -0.9947f, -0.9502f,
            -0.9057f, -0.8612f, -0.8167f, -0.7722f, -0.7277f, -0.6831f, -0.6386f, -0.5941f, -0.5496f,
            -0.5051f, -0.4606f, -0.4161f, -0.3716f, -0.3271f, -0.2826f, -0.2381f, -0.1936f, -0.1491f,
            -0.1046f, -0.0601f, -0.0156f, 0.0289f, 0.0734f, 0.1179f, 0.1624f, 0.2069f, 0.2514f,
            0.2959f, 0.3404f, 0.3849f, 0.4294f, 0.4739f, 0.5184f, 0.5630f, 0.6075f, 0.6520f,
        };

        Sampler sampler(22050);
        sampler.start(buffer, 0, 101, LOOP_MODE_UNTIL_RELEASE, 0, 100, 48000, 69, 5, -12, 50);

        float result[64];

        sampler.process(result, 64, 60);

        for (int i = 0; i < 64; ++i)
            REQUIRE(result[i] == Approx(ref1[i]).margin(0.0001f));

        sampler.process(result, 64, 60);

        for (int i = 0; i < 64; ++i)
            REQUIRE(result[i] == Approx(ref2[i]).margin(0.0001f));
    }
}
